import React, { Component} from "react";
import { connect } from "react-redux";
import PropTypes from 'prop-types';
import "../css/App.css";
import {
  Route,
  NavLink,
  BrowserRouter,
  Redirect,
  Switch
} from "react-router-dom";
import store from "../store/configureStore";
import { usersFetchData } from "../actions/Users";

import ChatMenu from "./ChatMenu";
import Home from "./Home";
import LoggedInUserCard from "./LoggedInUserCard";
import MainMenu from "./MainMenu";
import NotFound from "./NotFound";
import Profile from "./Profile";
import ProspelaBot from "./ProspelaBot";
import ProtectedRoute from "./ProtectedRoute";
import Teams from "./Teams";
import Todo from "./Todo";
import TypeformSignUp from "./TypeformSignUp";
import VerifyEmail from "./VerifyEmail";

class Dashboard extends Component{
  render(){
    return(
      <BrowserRouter>
        <div className="clientUI">
          <div className="clientMenuContainer">
            <h1>Prospela Dashboard</h1>
            <LoggedInUserCard />
            <MainMenu />
            <ChatMenu chats={DUMMY_CHAT_LIST} />
            <ul className="logout">
              <li><a href="/logout">Logout</a></li>
            </ul>
          </div>
          <div className="clientWindowContainer">
            <Switch>
              <Route exact path="/" component={Home}/>
              <ProtectedRoute path="/profile" roleAllowed="mentee" component={Profile}/>
              <ProtectedRoute path="/to-do-list" roleAllowed="mentor" component={Todo}/>
              <ProtectedRoute path="/teams" roleAllowed="mentor" component={Teams}/>
              <Route path="/messages/Prospela" roleAllowed="mentee" component={ProspelaBot}/>
              <Route component={NotFound}/>
            </Switch>
	  </div>
        </div>
      </BrowserRouter>
    );
  }
}

class App extends Component{
  componentDidMount() {
    this.props.fetchData();
  }
  render() {
    const userRole = this.props.users.role;
    return (
      <div>
        {{
          ['mentee']: <MenteeSteps />,
          ['mentor']: <MentorSteps />,
        }[userRole]}
      </div>
    );
  }
}

function MenteeSteps(){
  const step = 1;
//    const step = this.props.users.step;
      switch (step) {
        case 1:
          return (
            <BrowserRouter>
              <Switch>
                <Redirect exact from="/" to="/mentee-signup" />
                <Route path="/mentee-signup" component={TypeformSignUp} />
              </Switch>
            </BrowserRouter>
          );
        case 2:
          return (
            <BrowserRouter>
              <Switch>
                <Redirect exact from="/" to="/verify-email" />
                <Route path="/verify-email" component={VerifyEmail} />
              </Switch>
            </BrowserRouter>
          );
        case 3:
          return <Dashboard />
      }
}

function MentorSteps(){
  const step = 2;
//    const step = this.props.users.step;
      switch (step) {
        case 1:
          return (
            <BrowserRouter>
              <Switch>
                <Redirect exact from="/" to="/mentor-signup" />
                <Route path="/mentor-signup" component={TypeformSignUp} />
              </Switch>
            </BrowserRouter>
          );
        case 2:
          return (
            <BrowserRouter>
              <Switch>
                <Redirect exact from="/" to="/verify-email" />
                <Route path="/verify-email" component={VerifyEmail} />
              </Switch>
            </BrowserRouter>
          );
        case 3:
          return <Dashboard />
      }
}

// Dummy chat list data (this will eventually come from Postgres)
const DUMMY_CHAT_LIST = [
  {chatID: '10000', studentId: '12345', mentorID: '11111', matchedTimestamp: '20181219', status: 'Prospela'},
  {chatID: '10001', studentId: '12345', mentorID: '23456', matchedTimestamp: '20181219', status: 'ended'},
  {chatID: '10002', studentId: '12345', mentorID: '23456', matchedTimestamp: '20181219', status: 'ended'},
  {chatID: '10003', studentId: '12345', mentorID: '23456', matchedTimestamp: '20181219', status: 'active'},
  {chatID: '10004', studentId: '12345', mentorID: '23456', matchedTimestamp: '20181219', status: 'active'},
  {chatID: '10005', studentId: '12345', mentorID: '23456', matchedTimestamp: '20181219', status: 'ended'},
  {chatID: '10006', studentId: '12345', mentorID: '23456', matchedTimestamp: '20181219', status: 'ended'}
];

App.propTypes = {
  fetchData: PropTypes.func.isRequired,
  users: PropTypes.object.isRequired,
};

const mapStateToProps = (state) => {
  return {
    users: state.users
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    fetchData: () => dispatch(usersFetchData())
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(App);
