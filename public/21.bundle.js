(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[21],{

/***/ "./public/components/Select0.js":
/*!**************************************!*\
  !*** ./public/components/Select0.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _css_Select_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../css/Select.css */ \"./public/css/Select.css\");\n/* harmony import */ var _css_Select_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_css_Select_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GeneralFunctions.js */ \"./public/components/GeneralFunctions.js\");\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\n// Last merged this code on 28th mar 2024\n/* eslint-disable no-lonely-if, no-use-before-define, no-unused-expressions, no-shadow */\n\n\n\n\n\n\n// USE THESE TO STYLE:\n// https://www.w3schools.com/howto/howto_custom_select.asp\n// https://codepen.io/jbierly/pen/YyNjqw\n// https://codepen.io/kevinptt/pen/GqXZRL\n// https://codepen.io/uixcrazy/pen/qqjBzv?editors=0110\n// https://codepen.io/ayanna/pen/ObLowr\n// MAIN ONE https://codepen.io/CrocoDillon/pen/MpMoZe?editors=0110\nvar SelectBox = /*#__PURE__*/function (_React$Component) {\n  _inherits(SelectBox, _React$Component);\n  var _super = _createSuper(SelectBox);\n  function SelectBox(props) {\n    var _this;\n    _classCallCheck(this, SelectBox);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (e) {\n      var handleFocus = _this.props.handleFocus;\n      if (handleFocus) {\n        handleFocus(document.activeElement.id);\n      }\n      _this.setState({\n        isFocused: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (e) {\n      e.persist();\n      var _this$props = _this.props,\n        options = _this$props.options,\n        multiple = _this$props.multiple,\n        valueToShow = _this$props.valueToShow,\n        name = _this$props.name,\n        required = _this$props.required,\n        otherValidityChecks = _this$props.otherValidityChecks,\n        finMultiOptions = _this$props.finMultiOptions,\n        handleChange = _this$props.handleChange,\n        isForForm = _this$props.isForForm,\n        bringBackE = _this$props.bringBackE,\n        onBlur = _this$props.onBlur;\n      var hasMultipleAttributes = _this.checkMultipleAttributes();\n      var formId = isForForm === true ? e.currentTarget.closest(\"section > div\").dataset.idforstate : null;\n      if (onBlur) {\n        onBlur();\n      }\n      _this.setState(function (prevState) {\n        var values = prevState.values;\n        if (multiple) {\n          //const allSelected = values.length === (options.length - this.countTitles())\n          /*    console.log(\"values.length: \"+values.length)\r\n              console.log(\"options.length: \"+options.length)\r\n              console.log(\"this.countTitles(): \"+this.countTitles())\r\n              console.log(\"options.length - this.countTitles(): \"+options.length - this.countTitles())*/\n          //  console.log(\"allSelected: \"+allSelected)\n          //  if (allSelected != true) {\n          //      console.log(\"about to handlechange\")\n          if (handleChange) {\n            if (isForForm === true) {\n              var isValid = required ? values.length > 0 : true;\n              handleChange(values, formId, isValid);\n            } else {\n              bringBackE == true ? handleChange(values, e) : handleChange(values);\n            }\n          }\n          //      }\n          if (values.length != 0) {\n            if (finMultiOptions) {\n              finMultiOptions();\n            }\n          }\n          if (!required || required && values[0] != null) {\n            document.getElementById(\"selectBox-\" + name).classList.remove('error');\n            if (otherValidityChecks) {\n              otherValidityChecks();\n            }\n          } else {\n            document.getElementById(\"selectBox-\" + name).classList.add('error');\n          }\n          return {\n            focusedValue: -1,\n            isFocused: false,\n            isOpen: false\n          };\n        } else {\n          if (values.length === 0) {\n            if (!required || required && value != null) {\n              document.getElementById(\"selectBox-\" + name).classList.remove('error');\n              if (otherValidityChecks) {\n                otherValidityChecks();\n              }\n            } else {\n              document.getElementById(\"selectBox-\" + name).classList.add('error');\n            }\n            return {\n              isOpen: false,\n              isFocused: false\n            };\n          }\n          var value = values[0];\n          var focusedValue = -1;\n          if (value) {\n            focusedValue = options.findIndex(function (option) {\n              return (hasMultipleAttributes ? option[valueToShow] : option.value) === value;\n            });\n          }\n          if (!required || required && value != null) {\n            document.getElementById(\"selectBox-\" + name).classList.remove('error');\n            if (otherValidityChecks) {\n              otherValidityChecks();\n            }\n          } else {\n            document.getElementById(\"selectBox-\" + name).classList.add('error');\n          }\n          return {\n            focusedValue: focusedValue,\n            isFocused: false,\n            isOpen: false\n          };\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      if (e.target.dataset.id != undefined && e.target.dataset.id.indexOf(\"title\") != -1) {\n        return;\n      }\n      var _this$props2 = _this.props,\n        handleDone = _this$props2.handleDone,\n        isForForm = _this$props2.isForForm,\n        handleFocus = _this$props2.handleFocus,\n        multiple = _this$props2.multiple,\n        finMultiOptions = _this$props2.finMultiOptions,\n        options = _this$props2.options,\n        showCheckbox = _this$props2.showCheckbox,\n        name = _this$props2.name,\n        showBubbleVersion = _this$props2.showBubbleVersion;\n      var values = _this.state.values;\n      var currentState = _this.state.isOpen;\n      if (currentState === false) {\n        if (handleFocus) {\n          handleFocus(document.activeElement.id);\n        }\n        /*  if (showBubbleVersion) {\r\n            console.log(\"onclick undoing width\")\r\n            e.currentTarget.style.width = \"100%\"\r\n          }*/\n      }\n\n      if (multiple && currentState != true) {\n        if (values.length === options.length - _this.countTitles() && showCheckbox != true) {\n          return;\n        }\n      }\n      if (!showBubbleVersion && multiple && currentState === true && e.target.nodeName != 'svg' && e.target.nodeName != 'path' && e.target.id != 'chevronUp' && e.target.id != \"selectArrow\" && e.target.id != 'select-placeholder' && e.target.id != 'selectContainer' && e.target.id.indexOf(\"selectBox\") != 0 && e.target.id.indexOf(\"doneTick\") != 0) {\n        //change so if multiple and is open and clicked on box (not item) then close\n        return;\n      }\n      if (multiple && currentState === true && values.length != 0) {\n        if (finMultiOptions) {\n          finMultiOptions();\n        }\n        if (handleDone) {\n          if (isForForm === true && e.currentTarget.id === \"doneTick-\" + name) {\n            var formId = isForForm === true ? e.currentTarget.closest(\"section > div\").dataset.idforstate : null;\n            handleDone(formId);\n          } else {\n            handleDone();\n          }\n        }\n      }\n      _this.setState({\n        isOpen: !currentState\n        //      elementIdFocused: document.activeElement.id\n      }, function () {\n        //    if (this.state.isOpen === true && (this.countTitles() > 0 || showCheckbox === true)) {\n        //if (multiple && this.state.isOpen === true && (showCheckbox != true || (this.countTitles() > 0 && showCheckbox === true))) {\n        if (multiple && _this.state.isOpen === true) {\n          _this.heightCalc();\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onDeleteOption\", function (e) {\n      var _this$props3 = _this.props,\n        required = _this$props3.required,\n        otherValidityChecks = _this$props3.otherValidityChecks,\n        name = _this$props3.name,\n        handleChange = _this$props3.handleChange,\n        isForForm = _this$props3.isForForm,\n        bringBackE = _this$props3.bringBackE;\n      var value = e.currentTarget.dataset.value;\n      var formId = isForForm === true ? e.currentTarget.closest(\"section > div\").dataset.idforstate : null;\n      _this.setState(function (prevState) {\n        var _prevState$values = _toArray(prevState.values),\n          values = _prevState$values.slice(0);\n        var index = values.indexOf(value);\n        values.splice(index, 1);\n        if (handleChange) {\n          if (isForForm === true) {\n            var isValid = required ? values.length > 0 : true;\n            handleChange(values, formId, isValid);\n          } else {\n            bringBackE == true ? handleChange(values, e) : handleChange(values);\n          }\n        }\n        if (_toConsumableArray(values).length === 0) {\n          if (!required) {\n            document.getElementById(\"selectBox-\" + name).classList.remove('error');\n            //      document.getElementById(\"selectBox-\"+name).focus()\n            if (otherValidityChecks) {\n              otherValidityChecks();\n            }\n          } else {\n            document.getElementById(\"selectBox-\" + name).classList.add('error');\n            //      document.getElementById(\"selectBox-\"+name).focus()\n          }\n        }\n\n        return {\n          values: values,\n          numSelected: values.length\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onClickOption\", function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      e.persist();\n      var _this$props4 = _this.props,\n        options = _this$props4.options,\n        name = _this$props4.name,\n        required = _this$props4.required,\n        multiple = _this$props4.multiple,\n        handleChange = _this$props4.handleChange,\n        handleDone = _this$props4.handleDone,\n        valueToShow = _this$props4.valueToShow,\n        showCheckbox = _this$props4.showCheckbox,\n        otherValidityChecks = _this$props4.otherValidityChecks,\n        finMultiOptions = _this$props4.finMultiOptions,\n        isForForm = _this$props4.isForForm,\n        bringBackE = _this$props4.bringBackE;\n      if (e.currentTarget.dataset.id.indexOf(\"title\") != -1) {\n        return;\n      }\n      var hasMultipleAttributes = _this.checkMultipleAttributes();\n      var value = e.currentTarget.dataset.text;\n      var _index = options.findIndex(function (option) {\n        return (hasMultipleAttributes ? option[valueToShow] : option.value) == value;\n      });\n      var formId = isForForm === true ? e.currentTarget.closest(\"section > div\").dataset.idforstate : null;\n      if (!multiple) {\n        if (handleChange) {\n          if (isForForm) {\n            var isValid = required ? value != '' : true;\n            handleChange(e.currentTarget.dataset.id, formId, isValid);\n          } else {\n            bringBackE == true ? handleChange(e.currentTarget.dataset.id, e) : handleChange(e.currentTarget.dataset.id);\n          }\n        }\n      }\n      _this.setState(function (prevState) {\n        if (otherValidityChecks) {\n          otherValidityChecks();\n        }\n        if (!multiple) {\n          if (handleDone) {\n            handleDone(formId);\n          }\n          return {\n            values: [value],\n            focusedValue: _index,\n            isOpen: false\n          };\n        }\n        var _prevState$values2 = _toArray(prevState.values),\n          values = _prevState$values2.slice(0);\n        var index = values.indexOf(value);\n        if (index === -1) {\n          values.push(value);\n        } else {\n          values.splice(index, 1);\n        }\n        var allSelected = values.length === options.length - _this.countTitles();\n\n        //    if (allSelected != true) {\n        if (handleChange) {\n          if (isForForm === true) {\n            var _isValid = required ? values.length > 0 : true;\n            handleChange(values, formId, _isValid);\n          } else {\n            bringBackE == true ? handleChange(values, e) : handleChange(values);\n          }\n        }\n        //    }\n\n        if (allSelected === true) {\n          /*  */\n          if (!required || required && value != null) {\n            document.getElementById(\"selectBox-\" + name).classList.remove('error');\n            if (otherValidityChecks) {\n              otherValidityChecks();\n            }\n          } else {\n            document.getElementById(\"selectBox-\" + name).classList.add('error');\n          }\n          return {\n            numSelected: values.length,\n            values: values,\n            isOpen: false\n          };\n        } else {\n          if (!required || required && value != null) {\n            document.getElementById(\"selectBox-\" + name).classList.remove('error');\n            if (otherValidityChecks) {\n              otherValidityChecks();\n            }\n          } else {\n            document.getElementById(\"selectBox-\" + name).classList.add('error');\n          }\n          return {\n            numSelected: values.length,\n            values: values,\n            isOpen: true\n          };\n        }\n      }, function () {\n        if (showCheckbox === true) {\n          if (finMultiOptions) {\n            var allSelected = _this.state.values.length === options.length - _this.countTitles();\n            if (allSelected) {\n              finMultiOptions();\n            }\n          }\n          return;\n        } else {\n          if (multiple && _this.state.values.length != options.length - _this.countTitles()) {\n            _this.heightCalc();\n          } else return;\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onKeyDown\", function (e) {\n      e.persist();\n      var _this$state = _this.state,\n        isOpen = _this$state.isOpen,\n        focusedValue = _this$state.focusedValue,\n        isFocused = _this$state.isFocused;\n      var _this$props5 = _this.props,\n        handleChange = _this$props5.handleChange,\n        handleDone = _this$props5.handleDone,\n        handleTabPress = _this$props5.handleTabPress,\n        options = _this$props5.options,\n        multiple = _this$props5.multiple,\n        isLastChild = _this$props5.isLastChild,\n        finMultiOptions = _this$props5.finMultiOptions,\n        required = _this$props5.required,\n        name = _this$props5.name,\n        showCheckbox = _this$props5.showCheckbox,\n        valueToShow = _this$props5.valueToShow,\n        otherValidityChecks = _this$props5.otherValidityChecks,\n        isForForm = _this$props5.isForForm,\n        bringBackE = _this$props5.bringBackE,\n        showBubbleVersion = _this$props5.showBubbleVersion;\n      var hasMultipleAttributes = _this.checkMultipleAttributes();\n      var formId = isForForm === true ? e.currentTarget.closest(\"section > div\").dataset.idforstate : null;\n      var key = e.key || e.keyCode;\n\n      // User pressed the enter key\n      if (key === 'Enter' || key === 13) {\n        e.preventDefault();\n        _this.setState(function (prevState) {\n          var focusedValue = prevState.focusedValue;\n          if (!isOpen) {\n            /*console.log(\"isnt open so gets here\")\r\n            if (showBubbleVersion) {\r\n              e.currentTarget.style.width = \"100%\"\r\n            }*/\n\n            if (multiple) {\n              if (prevState.values.length === options.length - _this.countTitles() && showCheckbox != true) {\n                return;\n              }\n            }\n            return {\n              isOpen: true\n            };\n          } else {\n            if (multiple) {\n              //    this.setState(prevState => {\n              var _focusedValue = prevState.focusedValue;\n              if (_focusedValue !== -1) {\n                var isSectionTitle = options[_focusedValue][\"isTitle\"] === true;\n                if (isSectionTitle) {\n                  return;\n                }\n                var _prevState$values3 = _toArray(prevState.values),\n                  values = _prevState$values3.slice(0);\n                //  const value = options[focusedValue].value\n                var value = hasMultipleAttributes ? options[_focusedValue][valueToShow] : options[_focusedValue];\n                var index = values.indexOf(value);\n                if (index === -1) {\n                  values.push(value);\n                } else {\n                  values.splice(index, 1);\n                }\n                if (handleChange) {\n                  if (isForForm === true) {\n                    var isValid = required ? values.length > 0 : true;\n                    handleChange(values, formId, isValid);\n                  } else {\n                    bringBackE == true ? handleChange(values, e) : handleChange(values);\n                  }\n                }\n                var noMoreOptions = values.length === options.length - _this.countTitles() && showCheckbox != true;\n                if (noMoreOptions) {\n                  if (finMultiOptions) {\n                    finMultiOptions();\n                  }\n                  if (!required || required && value != null) {\n                    document.getElementById(\"selectBox-\" + name).classList.remove('error');\n                    if (otherValidityChecks) {\n                      otherValidityChecks();\n                    }\n                  } else {\n                    document.getElementById(\"selectBox-\" + name).classList.add('error');\n                  }\n                  return {\n                    values: values,\n                    numSelected: values.length,\n                    isOpen: false\n                  };\n                }\n                if (!required || required && value != null) {\n                  document.getElementById(\"selectBox-\" + name).classList.remove('error');\n                  if (otherValidityChecks) {\n                    otherValidityChecks();\n                  }\n                } else {\n                  document.getElementById(\"selectBox-\" + name).classList.add('error');\n                }\n                return {\n                  values: values,\n                  numSelected: values.length,\n                  isOpen: true\n                };\n              } else {\n                return {\n                  isOpen: false\n                };\n              }\n              //  })\n            } else if (focusedValue != -1) {\n              //    const value = hasMultipleAttributes ? options[focusedValue][valueToShow] : options[focusedValue];\n\n              var _isSectionTitle = options[focusedValue][\"isTitle\"] === true;\n              if (_isSectionTitle) {\n                return;\n              }\n              var _value = hasMultipleAttributes ? options[focusedValue][valueToShow] : options[focusedValue];\n              var _index2 = options.findIndex(function (option) {\n                return (hasMultipleAttributes ? option[valueToShow] : valueToShow === undefined ? option : option.value) === _value;\n              });\n              if (handleChange) {\n                if (isForForm === true) {\n                  var _isValid2 = required ? _value != '' : true;\n                  handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], formId, _isValid2, function () {\n                    if (handleDone) {\n                      handleDone(formId);\n                    }\n                  });\n                } else {\n                  bringBackE == true ? handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], e) : handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue]);\n                }\n              }\n              if (otherValidityChecks) {\n                otherValidityChecks();\n              }\n              return {\n                values: [_value],\n                focusedValue: _index2,\n                isOpen: false\n              };\n            } else {\n              if (prevState.values.length === 0) {\n                if (finMultiOptions) {\n                  finMultiOptions();\n                }\n                return {\n                  isOpen: false\n                };\n              }\n            }\n          }\n        }, function () {\n          if (showCheckbox === true) {\n            if (finMultiOptions) {\n              var allSelected = _this.state.values.length === options.length - _this.countTitles();\n              if (allSelected) {\n                finMultiOptions();\n              }\n            }\n          }\n          if (multiple && _this.state.isOpen === true) {\n            _this.heightCalc();\n          } else return;\n        });\n\n        // User pressed the tab key\n      } else if (key === 'Tab' || key === 9) {\n        if (isLastChild != undefined && isOpen === true) {\n          e.preventDefault();\n        }\n        _this.setState(function (prevState) {\n          var focusedValue = prevState.focusedValue;\n          if (!isOpen) {\n            return;\n          } else {\n            //    e.preventDefault();\n            //    const value = hasMultipleAttributes ? options[focusedValue][valueToShow] : options[focusedValue];\n\n            if (multiple) {\n              //  this.setState(prevState => {\n              var _focusedValue2 = prevState.focusedValue;\n              if (_focusedValue2 !== -1) {\n                var isSectionTitle = options[_focusedValue2][\"isTitle\"] === true;\n                if (isSectionTitle) {\n                  return;\n                }\n                var _prevState$values4 = _toArray(prevState.values),\n                  values = _prevState$values4.slice(0);\n                var value = hasMultipleAttributes ? options[_focusedValue2][valueToShow] : options[_focusedValue2];\n                var index = values.indexOf(value);\n                if (index === -1) {\n                  values.push(value);\n                  //  } else {\n                  //      values.splice(index, 1)\n                }\n\n                if (handleChange) {\n                  if (isForForm === true) {\n                    var isValid = required ? values.length > 0 : true;\n                    handleChange(values, formId, isValid);\n                  } else {\n                    bringBackE == true ? handleChange(values, e) : handleChange(values);\n                  }\n                }\n                if (values.length === options.length - _this.countTitles()) {\n                  if (finMultiOptions) {\n                    finMultiOptions();\n                  }\n                  //        }\n\n                  if (!required || required && value != null) {\n                    document.getElementById(\"selectBox-\" + name).classList.remove('error');\n                    if (otherValidityChecks) {\n                      otherValidityChecks();\n                    }\n                  } else {\n                    document.getElementById(\"selectBox-\" + name).classList.add('error');\n                  }\n                  return {\n                    values: values,\n                    numSelected: values.length,\n                    isOpen: false\n                  };\n                } else {\n                  if (!required || required && value != null) {\n                    document.getElementById(\"selectBox-\" + name).classList.remove('error');\n                    if (otherValidityChecks) {\n                      otherValidityChecks();\n                    }\n                  } else {\n                    document.getElementById(\"selectBox-\" + name).classList.add('error');\n                  }\n                  return {\n                    values: values,\n                    numSelected: values.length,\n                    isOpen: true\n                  };\n                }\n              }\n              //      })\n            } else {\n              var _isSectionTitle2 = options[focusedValue][\"isTitle\"] === true;\n              if (_isSectionTitle2) {\n                return;\n              }\n              var _value2 = hasMultipleAttributes ? options[focusedValue][valueToShow] : options[focusedValue];\n              var _index3 = options.findIndex(function (option) {\n                return (hasMultipleAttributes ? option[valueToShow] : valueToShow === undefined ? option : option.value) === _value2;\n              });\n              //      const isValid = this.checkExists(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue]);\n\n              if (handleChange) {\n                if (isForForm === true) {\n                  var _isValid3 = required ? _value2 != '' : true;\n                  handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], formId, _isValid3);\n                } else {\n                  bringBackE == true ? handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], e) : handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue]);\n                }\n              }\n              if (handleTabPress) {\n                handleTabPress(true);\n              }\n              return {\n                values: [_value2],\n                focusedValue: _index3,\n                isOpen: false\n              };\n            }\n          }\n        });\n\n        // User pressed the escape key\n      } else if (key === 'Escape' || key === 'Esc' || key === 27) {\n        if (isOpen) {\n          //        e.preventDefault()\n          _this.setState({\n            isOpen: false\n            //          focusedValue: -1,\n          });\n        }\n\n        // User pressed the up arrow\n      } else if (key === 'ArrowUp' || key === 38) {\n        if (isOpen || isFocused === true && focusedValue != -1) {\n          e.preventDefault();\n          _this.setState(function (prevState) {\n            var focusedValue = prevState.focusedValue;\n            var hasTitles = _this.countTitles() > 0;\n            var elements = document.getElementsByClassName(\"multiple value\");\n            for (var i = 0; i < elements.length; i++) {\n              elements[i].classList.remove('focused');\n            }\n            if ((hasTitles ? focusedValue === 1 : focusedValue === 0) || focusedValue === -1) {\n              if (isOpen) {\n                var parent = document.getElementById(\"options-\" + name);\n                var item = parent.firstElementChild;\n                parent.scrollTop = parent.scrollHeight - item.offsetHeight * 5;\n              }\n              focusedValue = options.length - 1;\n              var value = hasMultipleAttributes ? options[focusedValue][valueToShow] : options[focusedValue];\n              if (otherValidityChecks) {\n                otherValidityChecks();\n              }\n              if (!isOpen) {\n                if (handleChange) {\n                  if (isForForm === true) {\n                    var isValid;\n                    if (multiple) {\n                      isValid = required ? prevState.values.length > 0 : true;\n                    } else {\n                      isValid = required ? value != '' : true;\n                    }\n                    handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], formId, isValid);\n                  } else {\n                    bringBackE == true ? handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], e) : handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue]);\n                  }\n                }\n              }\n              if (multiple) {\n                var values = prevState.values;\n                var focusedSelectedValue = values.indexOf(value);\n                if (focusedSelectedValue != -1 && showCheckbox != true) {\n                  document.getElementById(values[focusedSelectedValue]).classList.add('focused');\n                }\n                return {\n                  focusedValue: focusedValue\n                };\n              } else {\n                return {\n                  values: [value],\n                  focusedValue: focusedValue\n                };\n              }\n            } else if (focusedValue > 0) {\n              if (isOpen) {\n                _this.handleMoveUp();\n              }\n              if (hasTitles) {\n                if (options[focusedValue - 1][\"isTitle\"] === true) {\n                  focusedValue -= 2;\n                } else {\n                  focusedValue--;\n                }\n              } else {\n                focusedValue--;\n              }\n              var _value3 = hasMultipleAttributes ? options[focusedValue][valueToShow] : options[focusedValue];\n              if (!isOpen) {\n                if (handleChange) {\n                  if (isForForm === true) {\n                    var _isValid4;\n                    if (multiple) {\n                      _isValid4 = required ? prevState.values.length > 0 : true;\n                    } else {\n                      _isValid4 = required ? _value3 != '' : true;\n                    }\n                    handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], formId, _isValid4);\n                  } else {\n                    bringBackE == true ? handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], e) : handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue]);\n                  }\n                }\n              }\n              if (otherValidityChecks) {\n                otherValidityChecks();\n              }\n              if (multiple) {\n                var _values = prevState.values;\n                var _focusedSelectedValue = _values.indexOf(_value3);\n                if (_focusedSelectedValue != -1 && showCheckbox != true) {\n                  document.getElementById(_values[_focusedSelectedValue]).classList.add('focused');\n                }\n\n                /*if (focusedSelectedValue != -1) {\r\n                  document.getElementById(values[focusedSelectedValue]).classList.add('focused')\r\n                }*/\n                return {\n                  focusedValue: focusedValue\n                };\n              } else {\n                return {\n                  values: [_value3],\n                  focusedValue: focusedValue\n                };\n              }\n            }\n          });\n        } else {\n          e.preventDefault();\n        }\n\n        // User pressed the down arrow\n      } else if (key === 'ArrowDown' || key === 40) {\n        if (isOpen || isFocused === true && focusedValue != -1) {\n          e.preventDefault();\n          var hasTitles = _this.countTitles() > 0;\n          _this.setState(function (prevState) {\n            var focusedValue = prevState.focusedValue;\n            var elements = document.getElementsByClassName(\"multiple value\");\n            for (var i = 0; i < elements.length; i++) {\n              elements[i].classList.remove('focused');\n            }\n            if (focusedValue === options.length - 1) {\n              if (isOpen) {\n                var parent = document.getElementById(\"options-\" + name);\n                parent.scrollTop = 0;\n              }\n              if (_this.countTitles() > 0) {\n                focusedValue = 1;\n              } else {\n                focusedValue = 0;\n              }\n              var _value4 = hasMultipleAttributes ? options[focusedValue][valueToShow] : options[focusedValue];\n              if (otherValidityChecks) {\n                otherValidityChecks();\n              }\n              if (!isOpen) {\n                if (handleChange) {\n                  if (isForForm === true) {\n                    var isValid;\n                    if (multiple) {\n                      isValid = required ? prevState.values.length > 0 : true;\n                    } else {\n                      isValid = required ? _value4 != '' : true;\n                    }\n                    handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], formId, isValid);\n                  } else {\n                    bringBackE == true ? handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], e) : handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue]);\n                  }\n                }\n              }\n              if (multiple) {\n                var values = prevState.values;\n                var focusedSelectedValue = values.indexOf(_value4);\n                if (focusedSelectedValue != -1 && showCheckbox != true) {\n                  document.getElementById(values[focusedSelectedValue]).classList.add('focused');\n                }\n                return {\n                  focusedValue: focusedValue\n                };\n              } else {\n                return {\n                  values: [_value4],\n                  focusedValue: focusedValue\n                };\n              }\n            } else if (focusedValue === -1) {\n              if (hasTitles) {\n                focusedValue = 1;\n              } else {\n                focusedValue++;\n              }\n            } else {\n              if (hasTitles) {\n                if (options[focusedValue + 1][\"isTitle\"] === true) {\n                  focusedValue += 2;\n                } else {\n                  focusedValue++;\n                }\n              } else {\n                focusedValue++;\n              }\n            }\n            if (isOpen) {\n              _this.handleMoveDown();\n            }\n            var value = hasMultipleAttributes ? options[focusedValue][valueToShow] : options[focusedValue];\n            if (otherValidityChecks) {\n              otherValidityChecks();\n            }\n            if (!isOpen) {\n              if (handleChange) {\n                if (isForForm === true) {\n                  var _isValid5;\n                  if (multiple) {\n                    _isValid5 = required ? prevState.values.length > 0 : true;\n                  } else {\n                    _isValid5 = required ? value != '' : true;\n                  }\n                  handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], formId, _isValid5);\n                } else {\n                  bringBackE == true ? handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue], e) : handleChange(hasMultipleAttributes ? options[focusedValue].value : options[focusedValue]);\n                }\n              }\n            }\n            if (multiple) {\n              var _values2 = prevState.values;\n              var _focusedSelectedValue2 = _values2.indexOf(value);\n              if (_focusedSelectedValue2 != -1 && showCheckbox != true) {\n                document.getElementById(_values2[_focusedSelectedValue2]).classList.add('focused');\n              }\n              return {\n                focusedValue: focusedValue\n              };\n            } else {\n              return {\n                values: [value],\n                focusedValue: focusedValue\n              };\n            }\n          });\n        } else {\n          e.preventDefault();\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"stopPropagation\", function (e) {\n      e.stopPropagation();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleMoveUp\", function () {\n      var _this$state2 = _this.state,\n        focusedValue = _this$state2.focusedValue,\n        values = _this$state2.values;\n      var _this$props6 = _this.props,\n        options = _this$props6.options,\n        name = _this$props6.name,\n        showCheckbox = _this$props6.showCheckbox,\n        valueToShow = _this$props6.valueToShow;\n      var parent = document.getElementById(\"options-\" + name);\n      var hasTitles = _this.countTitles() > 0;\n      var item;\n      var titleItem;\n      if (hasTitles) {\n        item = parent.children[1];\n        titleItem = parent.firstElementChild;\n      } else {\n        item = parent.firstElementChild;\n\n        // i.e. 4 = 5th box\n        if (focusedValue < options.length - 4) {\n          parent.scrollTop -= item.offsetHeight;\n          return;\n        }\n      }\n      if (focusedValue < options.length - 4) {\n        if (showCheckbox != true) {\n          if (values.indexOf(options[focusedValue - 1][valueToShow]) != -1) {\n            return;\n          }\n        }\n\n        //check if next item is title\n        if (options[focusedValue - 1][\"isTitle\"] === true) {\n          // 20px is margin-top of the title\n          parent.scrollTop -= titleItem.offsetHeight + 20 + item.offsetHeight;\n        } else {\n          parent.scrollTop -= item.offsetHeight;\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleMoveDown\", function () {\n      var _this$state3 = _this.state,\n        focusedValue = _this$state3.focusedValue,\n        values = _this$state3.values;\n      var _this$props7 = _this.props,\n        name = _this$props7.name,\n        title = _this$props7.title,\n        options = _this$props7.options,\n        valueToShow = _this$props7.valueToShow,\n        showCheckbox = _this$props7.showCheckbox;\n      var parent = document.getElementById(\"options-\" + name);\n      var hasTitles = _this.countTitles() > 0;\n      var item;\n      var titleItem;\n      if (hasTitles) {\n        item = parent.children[1];\n        titleItem = parent.firstElementChild;\n      } else {\n        item = parent.firstElementChild;\n\n        // i.e. 4 = 5th box\n        if (focusedValue >= 4) {\n          parent.scrollTop += item.offsetHeight;\n          return;\n        }\n      }\n      if (focusedValue >= 4) {\n        if (showCheckbox != true) {\n          if (values.indexOf(options[focusedValue + 1][valueToShow]) != -1) {\n            return;\n          }\n        }\n\n        //check if next item is title\n        if (options[focusedValue + 1][\"isTitle\"] === true) {\n          // 20px is margin-top of the title\n          parent.scrollTop += titleItem.offsetHeight + 20 + item.offsetHeight;\n        } else {\n          parent.scrollTop += item.offsetHeight;\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"countTitles\", function () {\n      var options = _this.props.options;\n      var titleCount = options.filter(function (option) {\n        return option[\"isTitle\"] === true;\n      }).length;\n      return titleCount;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"heightCalc\", function (needValue) {\n      var _this$props8 = _this.props,\n        options = _this$props8.options,\n        name = _this$props8.name,\n        showCheckbox = _this$props8.showCheckbox,\n        required = _this$props8.required,\n        showBubbleVersion = _this$props8.showBubbleVersion;\n      var values = _this.state.values;\n      var containerHeight = 0;\n      var length = options.length;\n      // Makes container the height of the first 6 items\n      for (var i = 0; i < Math.min(7, length); i++) {\n        if (options[i][\"isTitle\"] === true) {\n          containerHeight += 40;\n\n          // Add 20px margin-top for all but the first title\n          if (i != 0) {\n            containerHeight += 20;\n          }\n        } else {\n          if (showCheckbox === true) {\n            containerHeight += 32;\n          } else {\n            containerHeight += 40;\n          }\n        }\n      }\n      if (needValue) {\n        return containerHeight;\n      } else {\n        document.getElementById('options-' + name).style.maxHeight = containerHeight + \"px\";\n        document.getElementById(\"autocompleter-doneContainer-\" + name).style.maxHeight = containerHeight + \"px\";\n        document.getElementById(\"autocompleter-doneContainer-\" + name).style.top = (showBubbleVersion ? containerHeight : containerHeight += 10) + \"px\";\n        if (showBubbleVersion) {\n          document.getElementById(\"autocompleter-doneContainer-\" + name).style.right = 5 + \"px\";\n        }\n        if (!required || required && values.length > 0) {\n          if (containerHeight === 40) {\n            return;\n          } else if (containerHeight === 32) {\n            document.getElementById(\"doneTick-\" + name).classList.add('solo');\n          } else {\n            document.getElementById(\"doneTick-\" + name).classList.remove('solo');\n          }\n        }\n      }\n    });\n    _this.state = {\n      values: [],\n      //    keysPressed: [],\n      focusedValue: -1,\n      isFocused: false,\n      isOpen: false,\n      numSelected: 0\n    };\n    return _this;\n  }\n  _createClass(SelectBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props9 = this.props,\n        focusOnLoad = _this$props9.focusOnLoad,\n        handleTabPress = _this$props9.handleTabPress,\n        name = _this$props9.name,\n        fromCommunityPage = _this$props9.fromCommunityPage,\n        commType = _this$props9.commType,\n        commTypeId = _this$props9.commTypeId,\n        defaultChecked = _this$props9.defaultChecked;\n      if (focusOnLoad) {\n        document.getElementById(\"selectBox-\" + name).focus();\n      }\n      if (handleTabPress) {\n        handleTabPress(false);\n      }\n      if (defaultChecked) {\n        this.setState({\n          values: defaultChecked,\n          // this will be an array of text i.e. 'labels' not 'values'\n          numSelected: defaultChecked.length\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var resetValues = this.props.resetValues;\n      if (prevProps.resetValues != resetValues && resetValues == true) {\n        this.resetValues();\n      }\n    }\n  }, {\n    key: \"checkExists\",\n    value: function checkExists(inputToCheck) {\n      var _this$props10 = this.props,\n        options = _this$props10.options,\n        required = _this$props10.required,\n        valueToShow = _this$props10.valueToShow;\n      var hasMultipleAttributes = this.checkMultipleAttributes();\n      var isValid = inputToCheck ? options.findIndex(function (option) {\n        return (hasMultipleAttributes ? option.value : valueToShow === undefined ? option : option[valueToShow]) === inputToCheck;\n      }) != -1 : required ? false : true;\n      return isValid;\n    }\n  }, {\n    key: \"checkUserInputExists\",\n    value: function checkUserInputExists(inputToCheck) {\n      var _this$props11 = this.props,\n        options = _this$props11.options,\n        required = _this$props11.required,\n        valueToShow = _this$props11.valueToShow;\n      var hasMultipleAttributes = this.checkMultipleAttributes();\n      var isValid = inputToCheck ? options.findIndex(function (option) {\n        return (hasMultipleAttributes ? option[valueToShow] : valueToShow === undefined ? option : option.value) === inputToCheck;\n      }) != -1 : required ? false : true;\n      return isValid;\n    }\n  }, {\n    key: \"checkMultipleAttributes\",\n    value: function checkMultipleAttributes() {\n      var options = this.props.options;\n      if (options[0].value != undefined || options[0].value != null) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"resetValues\",\n    value: function resetValues() {\n      this.setState({\n        values: []\n      });\n    }\n  }, {\n    key: \"renderValues\",\n    value: function renderValues() {\n      var _this2 = this;\n      var _this$props12 = this.props,\n        placeholder = _this$props12.placeholder,\n        placeholderOnClick = _this$props12.placeholderOnClick,\n        multiple = _this$props12.multiple,\n        showCheckbox = _this$props12.showCheckbox,\n        options = _this$props12.options,\n        placeholderIsDefaultValueIfNot = _this$props12.placeholderIsDefaultValueIfNot,\n        showBubbleVersion = _this$props12.showBubbleVersion;\n      var _this$state4 = this.state,\n        values = _this$state4.values,\n        numSelected = _this$state4.numSelected,\n        isOpen = _this$state4.isOpen;\n      if (values.length === 0 && !showBubbleVersion) {\n        var isDefaultValue = placeholderIsDefaultValueIfNot != null && placeholder != placeholderIsDefaultValueIfNot;\n        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n          className: \"select-placeholder\" + (isOpen === true && placeholderOnClick ? ' onClick' : '') + (isDefaultValue ? ' prospelaPurpleText' : ''),\n          id: \"select-placeholder\"\n        }, isOpen === true && placeholderOnClick ? placeholderOnClick : placeholder);\n      }\n      if (multiple && showCheckbox != true) {\n        return values.map(function (value, index) {\n          return (/* The <span> element is just used as a container to stopPropagation */\n            /* eslint-disable-next-line jsx-a11y/no-static-element-interactions */\n            react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n              key: value,\n              onClick: _this2.stopPropagation,\n              className: \"multiple value\"\n              //    id={index}\n              ,\n\n              id: value\n            }, value, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n              \"data-value\": value,\n              onClick: _this2.onDeleteOption,\n              className: \"delete\",\n              role: \"button\"\n            }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"X\"], null)))\n          );\n        });\n      }\n      if (showCheckbox === true) {\n        var allSelected = values.length === options.length - this.countTitles();\n        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n          className: \"multiple numChecked\"\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n          className: \"tickNumSelected\"\n        }, values.length === 0 && showBubbleVersion ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"strong\", null, \"-\")) : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"Check\"], null)), allSelected === true ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", null, \"All\") : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", null, values.length === 0 ? placeholder : numSelected + \" selected\"), showBubbleVersion && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n          className: \"arrow\",\n          id: \"selectArrow\"\n        }, isOpen ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"ChevronUp\"], null) : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"ChevronDown\"], null)));\n      } else if (showBubbleVersion) {\n        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n          className: \"multiple numChecked\"\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n          className: \"tickNumSelected\"\n        }, values.length == 0 ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"strong\", null, \"-\")) : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"Check\"], null)), values.length == 0 && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", null, placeholder), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n          className: \"overflow-ellipsis\"\n        }, values[0]), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n          className: \"arrow\",\n          id: \"selectArrow\"\n        }, isOpen ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"ChevronUp\"], null) : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"ChevronDown\"], null)));\n      } else {\n        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n          className: \"value overflow-ellipsis\"\n        }, values[0]);\n      }\n    }\n  }, {\n    key: \"renderOptions\",\n    value: function renderOptions() {\n      var _this3 = this;\n      var _this$props13 = this.props,\n        options = _this$props13.options,\n        showAbove = _this$props13.showAbove,\n        multiple = _this$props13.multiple,\n        valueToShow = _this$props13.valueToShow,\n        showDetail = _this$props13.showDetail,\n        showIcon = _this$props13.showIcon,\n        showCheckbox = _this$props13.showCheckbox,\n        detailToShow = _this$props13.detailToShow,\n        iconToShow = _this$props13.iconToShow,\n        name = _this$props13.name,\n        required = _this$props13.required,\n        dataExtraInfo1 = _this$props13.dataExtraInfo1,\n        dataExtraInfo2 = _this$props13.dataExtraInfo2;\n      var _this$state5 = this.state,\n        isOpen = _this$state5.isOpen,\n        values = _this$state5.values,\n        focusedValue = _this$state5.focusedValue;\n      var isSafari = Object(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"whichBrowser\"])() == 'safari';\n      if (!isOpen) {\n        return;\n      }\n      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n        className: (showDetail === true ? 'options showDetail' : 'options noDetail') + (showAbove ? ' showAbove' : ''),\n        id: 'options-' + name\n        //    onMouseMove={this.onMouseMove}\n        //      onBlur={this.onMouseOut}\n      }, options.map(function (option, index) {\n        var hasMultipleAttributes = _this3.checkMultipleAttributes();\n        var value = hasMultipleAttributes === true ? option[valueToShow] : option;\n        var detail = detailToShow == undefined ? '' : option[detailToShow];\n        var icon = iconToShow == undefined ? '' : option[iconToShow];\n        var isSectionTitle = option[\"isTitle\"] === true;\n        var selected = values.includes(value);\n        var className = \"option\";\n        if (isSectionTitle) {\n          className += \" title\";\n\n          //added\n        } else if (showCheckbox === true) {\n          className += \" showCheckbox\";\n        } else {\n          className += \" overflow-ellipsis\";\n        }\n        if (selected) {\n          if (multiple) {\n            //added\n            if (showCheckbox === true) {\n              className += \" selectedCheckbox\";\n            } else {\n              className += \" selectedMultiple\";\n            }\n          } else {\n            className += \" selected\";\n          }\n        }\n        if (index === focusedValue) className += \" focused\";\n        if (showDetail === true) {\n          className += \" showDetail\";\n        } else {\n          className += \" noDetail\";\n        }\n        if (showIcon === true && (option[\"icon\"] != null || option[\"iconFA\"] != null)) {\n          className += \" showIcon\";\n        }\n        if (option[detailToShow] === \"\") className += \" extraTop\";\n        if (index === options.length) className += \" lastItem\";\n        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n          key: value,\n          \"data-id\": hasMultipleAttributes === true ? isSectionTitle ? 'title-' + value : option.value : option,\n          \"data-extrainfo1\": dataExtraInfo1 ? dataExtraInfo1 : null,\n          \"data-extrainfo2\": dataExtraInfo2 ? dataExtraInfo2 : null,\n          \"data-text\": value,\n          className: className\n          //      onFocus={this.onHoverOption} // placeholder as was erroring without this\n          //      onMouseOver={this.onHoverOption}\n          ,\n\n          onClick: _this3.onClickOption,\n          role: \"button\"\n          //  onFocus={this.onFocus}\n          //  onMouseOver={this.onHoverOption}\n        }, showIcon === true && option[\"iconFA\"] != null && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n          className: \"option-iconContainer FA\" + (isSectionTitle ? ' title' : '') + (showDetail === true ? \" showDetail\" : \" noDetail\") + (showCheckbox === true ? \" showCheckbox\" : \"\")\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"i\", {\n          className: icon\n        })), showIcon === true && option[\"icon\"] != null && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n          className: \"option-iconContainer \" + (showDetail === true ? \"showDetail\" : \"noDetail\")\n        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"img\", {\n          alt: \"option icon\",\n          src: icon\n        })), multiple && showCheckbox === true && isSectionTitle != true && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n          className: \"checkbox\"\n        }, selected ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"Check\"], null) : null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n          className: showCheckbox === true && isSectionTitle != true ? \"checkboxText overflow-ellipsis\" : \"\"\n        }, value), showDetail === true && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n          className: \"option-detail overflow-ellipsis\"\n        }, detail));\n      })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n        className: \"autocompleter-doneContainer\",\n        id: \"autocompleter-doneContainer-\" + name\n      }, multiple && (!required || required && values.length > 0) && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n        onClick: this.onClick,\n        role: \"button\"\n        //  className={\"doneTickSq-btn\" + ((required === true && values.length === 0) ? \" disabled\" : \"\")}\n        ,\n\n        className: \"doneTickSq-btn\" + (isSafari == true ? \" fontSize10\" : \"\"),\n        id: \"doneTick-\" + name\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n        className: \"tickNumSelected\"\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"Check\"], null)), \"Done\")));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props14 = this.props,\n        required = _this$props14.required,\n        name = _this$props14.name,\n        handleMouseDown = _this$props14.handleMouseDown,\n        showBubbleVersion = _this$props14.showBubbleVersion,\n        disabled = _this$props14.disabled,\n        customClassName = _this$props14.customClassName;\n      var _this$state6 = this.state,\n        isOpen = _this$state6.isOpen,\n        isFocused = _this$state6.isFocused;\n      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n        tabIndex: \"0\",\n        className: \"select form-control-std\" + (customClassName ? \" \" + customClassName : \"\") + (disabled ? ' disabled' : \"\") + (showBubbleVersion ? \" showBubbleVersion\" : \"\"),\n        id: \"selectBox-\" + name,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onKeyDown\n        //    onKeyUp={this.onKeyUp}\n        ,\n\n        onMouseDown: handleMouseDown,\n        required: required,\n        onClick: disabled ? null : this.onClick,\n        role: \"button\"\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n        className: \"selectContainer\",\n        id: \"selectContainer\"\n      }, this.renderValues(), !showBubbleVersion && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"span\", {\n        className: \"arrow\",\n        id: \"selectArrow\"\n      }, isOpen ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"ChevronUp\"], null) : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_GeneralFunctions_js__WEBPACK_IMPORTED_MODULE_3__[\"ChevronDown\"], null))), this.renderOptions()));\n    }\n  }]);\n  return SelectBox;\n}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);\n/* harmony default export */ __webpack_exports__[\"default\"] = (SelectBox);\n\n//# sourceURL=webpack:///./public/components/Select0.js?");

/***/ })

}]);